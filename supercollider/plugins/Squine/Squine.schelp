CLASS:: Squine
SUMMARY:: Sine-saw-square-pulse morphing oscillator with hard sync
CATEGORIES:: UGens>Generators>Deterministic

DESCRIPTION::

Bandlimited oscillator  morphing between sine, saw-like, square and pulse waveforms.

Smooth waveform shape, so useful as LFO and FM modulator as well as audio source.
The waveform morphing extends the palette of FM setups.

The emphasis::iminsweep:: argument controls minimum length of pulse/square high/low flips.
Due to this minimum sweep length, the waveform "degrades" to sinewave at higher frequencies, so no aliasing of higher square/saw tones.

Hardsync is a very fast pulse-like sweep, but also bandlimited.

strong::Guarantee::: If freq, clip and skew are generated by sinewave or Squine, the output is bandlimited
in virtually all configurations, including high index FM setups.

CLASSMETHODS::

METHOD::ar

argument::freq
Frequency in Herz

argument::clip
Squareness of waveform. Range 0.0-1.0

argument::skew
Left-right symmetry of waveform. Range -1.0 to +1.0
list::
## +/-1 with clip=0 is saw left or right.
## +/-1 with clip=1 is pulse up or down.
::

argument::sync
Hardsync signal. When >= 1.0, resync waveform by quickly raising emphasis::freq:: until waveform wraparound.

argument::mul
Output will be multiplied by this value.

argument::add
This value will be added to the output.

argument::iminsweep
Minimum length in samples of square/pulse sine sweeps.
Range: 4 to100.

Default value 0 gets a random value range 5-15.
This is useful because the spectrum of this waveform has quieter bands,
you avoid emphasizing these when using several squinewaves in chorus.


argument::initphase
Initialize to a part of waveform. Useful for some LFO applications.

Phase is a symbolic value range 0-2, where
list::
##	0.0 = top of curve, before downsweep
##	0.5 = after downsweep, before possible flat segment
##	1.0 = before upsweep
##	1.5 = after upsweep, before possible flat segment
##	2.0 = 0.0, top of curve, after flat segment
::

Default initphase value 1.25 is mid upsweep at zero crossing, like a standard sine/squarewave.


EXAMPLES::

code::

// Sinewave
{ Squine.ar(220, 0, 0, mul: 0.5) }.play;

// Squarewave sweeping to pulse
{ Squine.ar(220, clip: 1, skew: Line.kr(0, 1, 10), mul: 0.5) }.scope;

// Morphing waveform
{ Squine.ar(220, clip: SinOsc.kr(0.2, 0, 0.5, 0.5), skew: SinOsc.kr(0.13), mul: 0.5) }.scope;

// Audio-rate morphing waveform - no FM!
{ Squine.ar(220, clip: SinOsc.kr(0.2, 0, 0.5, 0.5), skew: SinOsc.ar(130), mul: 0.5) }.scope;

// Hardsync rising over 20 secs
{ Squine.ar(100, clip: SinOsc.kr(0.3, 0, 0.2, 0.5), skew: 1, sync: Impulse.ar(XLine.kr(5, 500, 20)), mul: 0.5) }.scope;

// Compare Squine with SinOsc example 3 -- try different clip/skew values
(
{ [ SinOsc.ar(SinOsc.ar(XLine.kr(1, 1000, 9), 0, 200, 800), mul: 0.5),
	Squine.ar(SinOsc.ar(XLine.kr(1, 1000, 9), 0, 200, 800), clip: 0.5, skew: 0.5, mul: 0.5) ]
}.scope;
)

// FM patch
(
  { Squine.ar(
        freq: Squine.ar(100, clip: SinOsc.ar(0.3, 0, 0.5, 0.5), skew: Line.ar(-1, 1, 20), mul: 200, add: 300),
        clip: SinOsc.ar(0.3, 0, 0.5, 0.5),
        skew: SinOsc.ar(1.1), 
        iminsweep: 4, mul: 0.5)  // Sharpest possible
  }.scope;
)

::
